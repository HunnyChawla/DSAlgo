Problem Description

You're given a read only array of n integers. Find out if any integer occurs more than n/3 times in the array in linear time and constant additional space.
If so, return the integer. If not, return -1.

If there are multiple solutions, return any one.

Example:

Input: [1 2 3 1 1]
Output: 1 
1 occurs 3 times which is more than 5/3 times.

#code

public class Solution {
	// DO NOT MODIFY THE LIST
	public int repeatedNumber(final List<Integer> a) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<a.size(); i++) {
            int num = a.get(i);
            Integer freq = map.get(num);
            if(freq == null) {
                map.put(num,1);
                if(1 > a.size()/3) {
                    return num;
                }
            }
            else {
                map.put(num,freq+1);
                if(freq+1 > a.size()/3) {
                    return num;
                }
            }
        }
        return -1;
	}
}

#notes
1. loop through every element and store the frequency of every element in a map.
2. return whenever you see the frequency is greater than n/3.

#link

https://www.interviewbit.com/problems/n3-repeat-number/
