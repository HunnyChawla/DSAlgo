Find the longest increasing subsequence of a given array of integers, A.

In other words, find a subsequence of array in which the subsequenceâ€™s elements are in strictly increasing order, and in which the subsequence is as long as possible. 

This subsequence is not necessarily contiguous, or unique.

In this case, we only care about the length of the longest increasing subsequence.



Input Format:

The first and the only argument is an integer array A.
Output Format:

Return an integer representing the length of the longest increasing subsequence.
Constraints:

1 <= length(A) <= 2000
0 <= A[i] <= 2500
Example :

Input 1:
    A = [1, 2, 1, 5]

Output 1:
    3
    
Explanation 1:
    The sequence : [1, 2, 5]

Input 2:
    A = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
    
Output 2:
    6

Explanation 2:
    The sequence : [0, 2, 6, 9, 13, 15] or [0, 4, 6, 9, 11, 15] or [0, 4, 6, 9, 13, 15]
    
#code

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int lis(final int[] A) {
        int arr[] = new int[A.length];
        int maxLength = 1;
        arr[A.length-1] = 1;
        for(int i=A.length-2; i>=0; i--) {
            boolean flag = true;
            arr[i] = 1;
            int j=i+1;
            int maxLen = 1;
            while(j<A.length && flag) {
                if(A[j]>A[i]) {
                    maxLen = Math.max(maxLen,arr[j]+1);
                    arr[i] = maxLen;
                    if(maxLen>maxLength) {
                        flag = false;
                    }
                    //System.out.println("A[i]="+A[i]+" A[j]="+A[j]);
                }
                j++;
            }
            maxLength = Math.max(maxLen,maxLength);
        }
        //System.out.println(Arrays.toString(arr));
        return maxLength;
        
    }
}


#notes
start with the last element which will be having longest possible subseqence of length 1 and calculate till the first element using already calculated values.
