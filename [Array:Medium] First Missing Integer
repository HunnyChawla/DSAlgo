Given an unsorted integer array, find the first missing positive integer.

Example:

Given [1,2,0] return 3,

[3,4,-1,1] return 2,

[-8, -7, -6] returns 1

Your algorithm should run in O(n) time and use constant space.

#code

public class Solution {
    public int firstMissingPositive(int[] A) {
        for(int i=0; i<A.length; i++) {
            if(!(A[i]<=0 || A[i]>A.length || A[i] == i+1)) {
                int temp = A[i];
                if(A[i] == A[temp-1]) {
                    continue;
                }
                A[i] =  A[temp-1];
                A[temp-1] = temp;
                i--;
            }
        }
        //System.out.println(Arrays.toString(A));
        for(int i=0; i<A.length; i++) {
            if(A[i]!=i+1) {
                return i+1;
            }
        }
        return A.length+1;
    }
}


#notes

1. Try to move every number to their correct position except negative number or zero or the number greater than the length of the array.
2. if you are swaping a number with the same number present at other position, it will be infinite so skip it.
3. And check first number which is not at its correct position.

#link
https://www.interviewbit.com/problems/first-missing-integer/
