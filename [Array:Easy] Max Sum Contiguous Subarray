Find the contiguous subarray within an array, A of length N which has the largest sum.

Input Format:

The first and the only argument contains an integer array, A.
Output Format:

Return an integer representing the maximum possible sum of the contiguous subarray.
Constraints:

1 <= N <= 1e6
-1000 <= A[i] <= 1000
For example:

Input 1:
    A = [1, 2, 3, 4, -10]

Output 1:
    10

Explanation 1:
    The subarray [1, 2, 3, 4] has the maximum possible sum of 10.

Input 2:
    A = [-2, 1, -3, 4, -1, 2, 1, -5, 4]

Output 2:
    6

Explanation 2:
    The subarray [4,-1,2,1] has the maximum possible sum of 6
    
    
#code

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int maxSubArray(final int[] A) {
        int maxSum = -1000;
        int sum = 0;
        for(int i=0; i<A.length; i++) {
            sum+=A[i];
            if(sum<A[i]) {
                sum = A[i];
            }
            if(maxSum < sum) {
                maxSum = sum;
            }
        }
        return maxSum;
    }
}


#notes
1. Interate over the elements.
2. Add every element and track the current sum and maximum sum til now.
3. If the sum of the previous subArray is less than the value of current element, the we don't need to consider that sunArray.

#link
https://www.interviewbit.com/problems/max-sum-contiguous-subarray/
