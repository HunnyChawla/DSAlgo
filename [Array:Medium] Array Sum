Problem Description
 
 

You are given two numbers represented as integer arrays A and B, where each digit is an element.

You have to return an array which representing the sum of the two given numbers.

The last element denotes the least significant bit, and the first element denotes the most significant bit.



Problem Constraints
1 <= |A|, |B| <= 105
0 <= Ai, Bi <= 9


Input Format
The first argument is an integer array A. The second argument is an integer array B.


Output Format
Return an array denoting the sum of the two numbers.


Example Input
Input 1:
A = [1, 2, 3]
B = [2, 5, 5]
Input 2:

A = [9, 9, 1]
B = [1, 2, 1]


Example Output
Output 1:
[3, 7, 8]
Output 2:

[1, 1, 1, 2]


Example Explanation
Explanation 1:
Simply, add all the digits in their place.
Explanation 2:

991 + 121 = 1112
Note that the resultant array size might be larger.


#code

public class Solution {
    public int[] addArrays(int[] A, int[] B) {
        Stack<Integer> stack = new Stack<>();
        int sum = 0;
        int diff = 0;
        if(A.length>B.length) {
            diff = A.length - B.length;
            for(int i=A.length-1; i-diff>=0; i--) {
                sum += A[i]+B[i-diff];
                stack.push(sum%10);
                sum/=10;
            }
            
            for(int i=diff-1; i>=0; i--) {
                sum += A[i];
                stack.push(sum%10);
                sum/=10;
            }
            while(sum!=0) {
                stack.push(sum%10);
                sum/=10;
            }
               
        }
        else {
            diff = B.length - A.length;
            for(int i=B.length-1; i-diff>=0; i--) {
                sum += A[i-diff]+B[i];
                stack.push(sum%10);
                sum/=10; 
            }

            for(int i=diff-1; i>=0; i--) {
                sum += B[i];
                stack.push(sum%10);
                sum/=10;
            }
            while(sum!=0) {
                stack.push(sum%10);
                sum/=10;
            }
            
        }
        
        int arr[] = new int[stack.size()];
        for(int i=0; i<arr.length; i++) {
            arr[i] = stack.pop();
        }
        return arr;
    }
}

#notes
1. start adding each element from the end of the both array. Push the the first digit of sum in stack and rest store in variable sum.
2. start adding rest of the digit in the larger array and sum. Push the the first digit of sum in stack and rest store in variable sum.
3. start push every digit of the sum in stack.
4. Pop each element of the stack and add into the output array.

#link

https://www.interviewbit.com/problems/array-sum/

